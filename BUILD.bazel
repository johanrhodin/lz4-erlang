load("@rules_erlang//:erlang_app.bzl", "erlang_app", "test_erlang_app")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:ct.bzl", "assert_suites", "ct_suite")
load("@rules_erlang//tools:erlang_headers.bzl", "DEFAULT_FILENAMES")
load(":util.bzl", "common_root_as_var")

APP_NAME = "lz4"

APP_DESCRIPTION = "An LZ4 compression library that wraps an NIF"

APP_VERSION = "1.9.2.3"

DEPS = [
    "@host_triple//:erlang_app",
]

# NOTE: A combination of genrule and cc_import is used to copy headers
#       such that they can be included at a known relative path when
#       building :lz4_nif_linux.

# places files in $(BINDIR) for inclusion at a known path below
genrule(
    name = "erlang_headers_files",
    srcs = [
        "@rules_erlang//tools:erlang_headers",
    ],
    outs = DEFAULT_FILENAMES,
    cmd = "cp $(SRCS) $(RULEDIR)",
)

cc_import(
    name = "erlang_headers",
    hdrs = [
        ":erlang_headers_files",
    ],
)

# places files in $(BINDIR) for inclusion at a known path below
genrule(
    name = "liblz4_files",
    srcs = [
        "@lz4_src//:lib/lz4.h",
        "@lz4_src//:lib/lz4frame.h",
        "@lz4_src//:static_library_linux",
    ],
    outs = [
        "lz4.h",
        "lz4frame.h",
        "liblz4.a",
    ],
    cmd = "cp $(SRCS) $(RULEDIR)",
)

cc_import(
    name = "liblz4",
    hdrs = [
        ":lz4.h",
        ":lz4frame.h",
    ],
    static_library = ":liblz4.a",
)

# places files in $(BINDIR) for inclusion at a known path below
genrule(
    name = "nif_helpers_files",
    srcs = [
        "@nif_helpers//:nif_helpers.h",
        "@nif_helpers//:nif_helpers.c",
    ],
    outs = [
        "nif_helpers.h",
        "nif_helpers.c",
    ],
    cmd = "cp $(SRCS) $(RULEDIR)",
)

cc_library(
    name = "nif_helpers",
    srcs = [
        "nif_helpers.c",
        "nif_helpers.h",
        "@rules_erlang//tools:erlang_headers",
    ],
    hdrs = [
        "nif_helpers.h",
    ],
    deps = [
        ":erlang_headers",
    ],
)

common_root_as_var(
    name = "lz4_headers_root",
    srcs = [
        ":liblz4_files",
    ],
)

cc_binary(
    name = "lz4_nif_linux",
    srcs = glob([
        "c_src/**/*.c",
        "c_src/**/*.h",
    ]),
    copts = [
        "-I $(LZ4_HEADERS_ROOT)",
        "-fPIC",
        # "-Wno-implicit-function-declaration",
        # "-Wno-unused-command-line-argument",
        # "-v",
    ],
    exec_compatible_with = [
        "@bazel_tools//platforms:x86_64",
        "@bazel_tools//platforms:linux",
        "@bazel_tools//tools/cpp:clang",
    ],
    linkshared = True,
    target_compatible_with = [
        "@bazel_tools//platforms:x86_64",
        "@bazel_tools//platforms:linux",
    ],
    toolchains = [
        ":lz4_headers_root",
    ],
    deps = [
        ":erlang_headers",
        ":liblz4",
        ":nif_helpers",
    ],
)

genrule(
    name = "lz4_nif_so",
    srcs = [":lz4_nif_linux"],
    outs = ["priv/lz4_nif.so"],
    cmd = "cp $< $@",
)

erlang_app(
    app_description = APP_DESCRIPTION,
    app_name = APP_NAME,
    app_version = APP_VERSION,
    extra_priv = ["priv/lz4_nif.so"],
    deps = DEPS,
)

test_erlang_app(
    app_description = APP_DESCRIPTION,
    app_name = APP_NAME,
    app_version = APP_VERSION,
    extra_priv = ["priv/lz4_nif.so"],
    deps = DEPS,
)

xref()

plt(
    name = "base_plt",
)

dialyze(
    size = "small",
    plt = ":base_plt",
)

genrule(
    name = "place_reference_file",
    srcs = ["@pdf_reference//file"],
    outs = ["test/lz4f_SUITE_data/pdf_reference_1-7.pdf"],
    cmd = "cp $< $@",
)

assert_suites([
    ct_suite(
        name = "lz4f_SUITE",
        data = [
            "test/lz4f_SUITE_data/pdf_reference_1-7.pdf",
        ],
        runtime_deps = [
            "@ct_helper//:erlang_app",
        ],
    ),
])
